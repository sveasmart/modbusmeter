#------------------------------------------------
# This is the default configuration for Meter.
# Override it by creating a local.yml next to it.
# The config isn't hot-reloaded, so you need to restart
# the meter if you change anything.
#------------------------------------------------

# The URL of the backend to which ticks are posted
serverUrl: "http://localhost:3000/modbusnotification"

# How long we are willing to wait for a response from serverUrl,
# before considering it a failure and starting the retry loop.
# This needs to be pretty big, for those cases where a meter has been offline
# for weeks and then suddenly goes online and wants to send a notification with thousands of events.
# For example, in one case meter send a notification with 36,000 events, and it took 74 seconds to get a response
# from the server.
serverTimeoutSeconds: "300"

# The URL that will be used for the QR code that is displayed
# The deviceId will be passed along using an # (anchor tag).
# Example: http://my.server/register#abcdefgh
registrationBaseUrl: "http://localhost:3000/register"

# Which file contains the device ID
deviceIdPath: "./test/device-id"

# Use this to override deviceIdPath with a specific device Id instead.
deviceId:

# When should we send notifications?
# Lower frequency means fewer http requests and more measurements per batch.
# Use the cron syntax
# https://www.npmjs.com/package/node-cron
# For example, every 10 seconds: ("*/10 * * * * *")
# Or first minute of every hour: ("* 0 * * * *")
notificationSchedule: "*/10 * * * * *"

# Limit the number of events per notification.
# If more events than this have been buffered up,
# they will be split into separate notifications.
# Otherwise we risk server timeouts because of the large number of
# database updates happening on the server side.
maxMeasurementsPerNotification: "1000"

# When should we poll the modbus server?
# Use the cron syntax
# https://www.npmjs.com/package/node-cron
# For example, every 5 seconds: ("*/5 * * * * *")
# Or first minute of every hour: ("* 0 * * * *")
pollSchedule: "*/5 * * * * *"

# If true, logs stuff that happens over and over again
# Should be a string, so don't skip the quotes.
verboseLogging: "true"

# Which port the display RPC server is listening on.
# https://github.com/sveasmart/display
# ... or leave it blank if we should just use console.log instead of trying to talk to a display
displayRpcPort: 5000

# Which tabs on the display that we use to write stuff.
# (only relevant if displayRpcPort is given)
mainDisplayTab: "tab0"
qrCodeDisplayTab: "tab2"

# Which host/IP is the modbus server listening on
modbusServerHost: "192.168.1.101"

# Which port is the modbus server listening on
modbusServerPort: 502

# 3-letter code for the manufacturer, ex: SEC or GAV.
# This is used to decide which modbus register to read meter values from.
# See modbus_client.js
modbusManufacturer: "SEC"

# If true, it won't talk to modbus for real, it will just use fake data
simulateModbus: false


# These params are displayed on the screen
supportPhoneNumber:
supportUrl:
customerName:
customerAddress:

# Retry settings for when the serverUrl isn't reachable.
# or when the display isn't available
retry:
  minTimeout: 1000 #First retry is after 1 second
  factor: 2 #and next retry will be after 2 seconds, then 4 seconds, 8 seconds, 16 seconds...
  maxTimeout: 30000 #and all retries after that will be in 30 second intervals
  retries: 100000 #That's about 1 month of retrying! 100,000 x 30 seconds.
